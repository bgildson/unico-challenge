// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/feiralivre/feiralivre.go

// Package feiralivre is a generated GoMock package.
package feiralivre

import (
	reflect "reflect"

	entity "github.com/bgildson/unico-challenge/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 entity.FeiraLivre) (*entity.FeiraLivre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*entity.FeiraLivre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// CreateOrUpdate mocks base method.
func (m *MockRepository) CreateOrUpdate(feiraLive entity.FeiraLivre) (*entity.FeiraLivre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", feiraLive)
	ret0, _ := ret[0].(*entity.FeiraLivre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRepositoryMockRecorder) CreateOrUpdate(feiraLive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRepository)(nil).CreateOrUpdate), feiraLive)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(arg0 int) (*entity.FeiraLivre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.FeiraLivre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), arg0)
}

// GetByQueryParams mocks base method.
func (m *MockRepository) GetByQueryParams(arg0 QueryParams) ([]entity.FeiraLivre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQueryParams", arg0)
	ret0, _ := ret[0].([]entity.FeiraLivre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQueryParams indicates an expected call of GetByQueryParams.
func (mr *MockRepositoryMockRecorder) GetByQueryParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQueryParams", reflect.TypeOf((*MockRepository)(nil).GetByQueryParams), arg0)
}

// Remove mocks base method.
func (m *MockRepository) Remove(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepository)(nil).Remove), arg0)
}

// SyncPK mocks base method.
func (m *MockRepository) SyncPK() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncPK")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncPK indicates an expected call of SyncPK.
func (mr *MockRepositoryMockRecorder) SyncPK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPK", reflect.TypeOf((*MockRepository)(nil).SyncPK))
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 int, arg1 entity.FeiraLivre) (*entity.FeiraLivre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.FeiraLivre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0, arg1)
}
